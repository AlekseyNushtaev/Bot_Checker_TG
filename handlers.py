from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, delete
from sqlalchemy.exc import IntegrityError

from db.models import Session, User, Accaunt
from config import ADMIN_IDS, USER_PASS

router = Router()


async def get_active_users():
    users = []
    async with Session() as session:
        result = await session.execute(select(User).where(User.is_active == True))
        active_users = result.scalars().all()

        for user in active_users:
            users.append(user.user_id)

    for admin_id in ADMIN_IDS:
        users.append(admin_id)
    return users



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")],
            [KeyboardButton(text="üìä –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    waiting_for_account_identifier = State()
    waiting_for_account_remove = State()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å –ª—é–±—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()
    users = await get_active_users()
    if message.from_user.id in users:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=get_admin_keyboard()
        )
    else:
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        async with Session() as session:
            result = await session.execute(
                select(User).where(User.user_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()

            if not user:
                user = User(user_id=message.from_user.id)
                session.add(user)
                await session.commit()

            if user.is_active:
                await message.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")


@router.message(F.text == "üì• –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_acc_start(message: Message, state: FSMContext):
    users = await get_active_users()
    if message.from_user.id not in users:
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –≤—ã–±–æ—Ä:\n"
        "1. –Æ–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)\n"
        "2. ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100, —é–∑–µ—Ä–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ)\n"
        "3. ID –∞–∫–∫–∞—É–Ω—Ç–∞ (–≤—Å–µ —Ü–∏—Ñ—Ä—ã, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_account_identifier)


@router.message(AdminStates.waiting_for_account_identifier)
async def add_acc_finish(message: Message, state: FSMContext):
    try:
        identifier = message.text
        if identifier.startswith('@'):
            async with Session() as session:
                accaunt = Accaunt(tg_username=identifier, account_type='bot')
                session.add(accaunt)
                await session.commit()
                await message.answer(f"–ë–æ—Ç {identifier} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=get_admin_keyboard())
        elif identifier.startswith('-100'):
            async with Session() as session:
                accaunt = Accaunt(tg_id=int(identifier), account_type='chanel')
                session.add(accaunt)
                await session.commit()
                await message.answer(f"–ö–∞–Ω–∞–ª —Å id {identifier} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=get_admin_keyboard())
        elif identifier.isdigit():
            async with Session() as session:
                accaunt = Accaunt(tg_id=int(identifier), account_type='user')
                session.add(accaunt)
                await session.commit()
                await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —é–∑–µ—Ä–∞ —Å id {identifier} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=get_admin_keyboard())
        else:
            await message.answer("–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ", reply_markup=get_admin_keyboard())

    except IntegrityError:
        await message.answer("–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ", reply_markup=get_admin_keyboard())
    finally:
        await state.clear()


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def remove_acc_start(message: Message, state: FSMContext):
    users = await get_active_users()
    if message.from_user.id not in users:
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_account_remove)


@router.message(AdminStates.waiting_for_account_remove)
async def remove_acc_finish(message: Message, state: FSMContext):
    try:
        account = message.text
        if account.startswith('@'):
            async with Session() as session:
                result = await session.execute(
                    delete(Accaunt).where(Accaunt.tg_username == account)
                )

                await session.commit()

                if result.rowcount > 0:
                    await message.answer(f"–ë–æ—Ç {account} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã", reply_markup=get_admin_keyboard())
                else:
                    await message.answer(f"–ë–æ—Ç {account} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=get_admin_keyboard())
        elif account.startswith('-100'):
            async with Session() as session:
                result = await session.execute(
                    delete(Accaunt).where(Accaunt.tg_id == int(account))
                )

                await session.commit()

                if result.rowcount > 0:
                    await message.answer(f"–ö–∞–Ω–∞–ª —Å id {account} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã", reply_markup=get_admin_keyboard())
                else:
                    await message.answer(f"–ö–∞–Ω–∞–ª —Å id {account} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=get_admin_keyboard())
        elif account.isdigit():
            async with Session() as session:
                result = await session.execute(
                    delete(Accaunt).where(Accaunt.tg_id == int(account))
                )

                await session.commit()

                if result.rowcount > 0:
                    await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —é–∑–µ—Ä–∞ —Å id {account} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã", reply_markup=get_admin_keyboard())
                else:
                    await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —é–∑–µ—Ä–∞ —Å id {account} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", reply_markup=get_admin_keyboard())
        else:
            await message.answer("–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ", reply_markup=get_admin_keyboard())
    except:
        pass
    finally:
        await state.clear()


@router.message(F.text == "üìä –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
async def all_accs(message: Message, state: FSMContext):
    users = await get_active_users()
    print(users)
    if message.from_user.id not in users:
        return
    async with Session() as session:
        result = await session.execute(select(Accaunt))
        accounts = result.scalars().all()
        mes_ = []
        for account in accounts:
            if account.account_type == 'bot':
                text = f'–ë–æ—Ç {account.tg_username}'
                mes_.append(text)
            elif account.account_type == 'chanel':
                text = f'–ö–∞–Ω–∞–ª c id {account.tg_id} {account.title}'
                mes_.append(text)
            elif account.account_type == 'chanel':
                text = f'–ê–∫–∫–∞—É–Ω—Ç —é–∑–µ—Ä–∞ c id {account.tg_id} {account.username}'
                mes_.append(text)
    if mes_:
        await message.answer('\n'.join(mes_), reply_markup=get_admin_keyboard())


@router.message(F.text, ~F.from_user.id.in_(ADMIN_IDS))
async def handle_password(message: Message):
    async with Session() as session:
        result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()

        if user and not user.is_active:
            if message.text == USER_PASS:
                user.is_active = True
                await session.commit()
                await message.answer("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_admin_keyboard())
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
